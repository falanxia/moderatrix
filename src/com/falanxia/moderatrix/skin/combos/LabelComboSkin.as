/*
 * Falanxia Moderatrix.
 *
 * Copyright (c) 2011 Falanxia (http://falanxia.com)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

package com.falanxia.moderatrix.skin.combos {
	import com.falanxia.moderatrix.enums.SkinType;
	import com.falanxia.moderatrix.interfaces.ISkin;
	import com.falanxia.moderatrix.skin.LabelSkin;
	import com.falanxia.moderatrix.skin.Skin;



	/**
	 * Label combo skin.
	 *
	 * Label combo skin to be used with the LabelCombo widget.
	 *
	 * @author Vaclav Vancura / Falanxia a.s.
	 * @author Falanxia (<a href="http://falanxia.com">falanxia.com</a>, <a href="http://twitter.com/falanxia">@falanxia</a>)
	 * @since 1.0
	 */
	public class LabelComboSkin extends Skin implements ISkin {


		public var labelOutSkin:LabelSkin;
		public var labelHoverSkin:LabelSkin;
		public var labelFocusSkin:LabelSkin;



		/**
		 * Constructor.
		 * ID is autogenerated if it's empty
		 * @param config Config Object (optional)
		 * @param id Skin ID (optional)
		 */
		public function LabelComboSkin(config:Object, id:String = null) {
			labelOutSkin = new LabelSkin(config, id + "#labelOut");
			labelHoverSkin = new LabelSkin(config, id + "#labelHover");
			labelFocusSkin = new LabelSkin(config, id + "#labelFocus");

			super(SkinType.LABEL_COMBO, config, id);
		}



		/**
		 * Destroys the LabelComboSkin instance and frees it for GC.
		 */
		override public function destroy():void {
			super.destroy();

			labelOutSkin.destroy();
			labelHoverSkin.destroy();
			labelFocusSkin.destroy();

			labelOutSkin = null;
			labelHoverSkin = null;
			labelFocusSkin = null;
		}



		/**
		 * Parse config Object.
		 * @param value Config Object
		 */
		override public function parseConfig(value:Object):void {
			super.parseConfig(value);

			if(value.labelOut != undefined) labelOutSkin.parseConfig(value.labelOut);
			if(value.labelHover != undefined) labelHoverSkin.parseConfig(value.labelHover);
			if(value.labelFocus != undefined) labelFocusSkin.parseConfig(value.labelFocus);
		}



		/**
		 * Revert config to the last known state.
		 */
		override public function revertConfig():void {
			super.revertConfig();

			labelOutSkin.revertConfig();
			labelHoverSkin.revertConfig();
			labelFocusSkin.revertConfig();
		}
	}
}
