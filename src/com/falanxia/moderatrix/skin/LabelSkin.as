/*
 * Falanxia Moderatrix.
 *
 * Copyright (c) 2010 Falanxia (http://falanxia.com)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

package com.falanxia.moderatrix.skin {
	import com.falanxia.moderatrix.enums.*;
	import com.falanxia.moderatrix.interfaces.*;
	import com.falanxia.utilitaris.enums.*;
	import com.falanxia.utilitaris.helpers.*;
	import com.falanxia.utilitaris.utils.*;

	import flash.filters.*;
	import flash.utils.*;



	/**
	 * Label skin.
	 *
	 * Label skin to be used with the Label widget.
	 *
	 * @author Vaclav Vancura @ Falanxia a.s. <vaclav@falanxia.com>
	 * @author Falanxia (<a href="http://falanxia.com">falanxia.com</a>, <a href="http://twitter.com/falanxia">@falanxia</a>)
	 * @since 1.0
	 */
	public class LabelSkin extends Skin implements ISkin {


		private var _settings:Dictionary;

		private var oldSettings:Dictionary;



		/**
		 * Constructor.
		 * ID is autogenerated if it's empty
		 * @param id Skin ID (optional)
		 */
		public function LabelSkin(id:String = null) {
			super(SkinType.LABEL, id);

			_settings = resetSettings();
			oldSettings = new Dictionary();

			ObjectUtils.assign(oldSettings, _settings);
		}



		/**
		 * Destroys the LabelSkin instance and frees it for GC.
		 */
		override public function destroy():void {
			super.destroy();

			_settings = null;
			oldSettings = null;
		}



		/**
		 * Parse config Object.
		 * @param value Config Object
		 */
		override public function parseConfig(value:Object):void {
			super.parseConfig(value);

			ObjectUtils.assign(oldSettings, _settings);

			// TODO: This is the way how to speed up skins, apply it everywhere
			for(var i:String in value) {
				if(i != "filters") {
					_settings[i] = value[i];
				}
			}

			// TODO: Add this functionality to all skins where it's needed
			if(value.filters != undefined && value.filters is Array) {
				for each(var f:* in value.filters) {
					if(f is BitmapFilter) {
						// bitmapFilter means we got filter already converted
						_settings.filters.push(f);
					}
					else {
						if(f is Object) {
							// it's an Object, we need to convert it first
							try {
								switch(f.filter) {
									case "DropShadow" :
										var dsDistance:Number = (f.distance == undefined) ? 1 : f.distance;
										var dsAngle:Number = (f.angle == undefined) ? 45 : f.angle;
										var dsColor:Number = (f.color == undefined) ? 0x000000 : f.color;
										var dsAlpha:Number = (f.alpha == undefined) ? 0.5 : f.alpha;
										var dsBlur:Number = (f.blur == undefined) ? 1 : f.blur;
										var dsStrength:Number = (f.strength == undefined) ? 1 : f.strength;
										var dsQuality:Number = (f.quality == undefined) ? 1 : f.quality;
										var dsInner:Boolean = (f.inner == undefined) ? false : f.inner;
										var dsKnockout:Boolean = (f.knockout == undefined) ? false : f.knockout;
										var dsHideObject:Boolean = (f.hideObject == undefined) ? false : f.hideObject;
										var g:DropShadowFilter = new DropShadowFilter(dsDistance, dsAngle, dsColor, dsAlpha, dsBlur, dsBlur,
										                                              dsStrength, dsQuality, dsInner, dsKnockout, dsHideObject);

										_settings.filters.push(g);

										break;

									default:
								}
							}
							catch(err:Error) {
								throw new Error(printf("Error converting filters Object to native filters (%s)", err.message));
							}
						}
					}
				}
			}
		}



		/**
		 * Revert config to the last known state.
		 */
		override public function revertConfig():void {
			super.revertConfig();

			_settings = new Dictionary();

			ObjectUtils.assign(_settings, oldSettings);

			oldSettings = resetSettings();
		}



		/**
		 * Get current settings.
		 * @return Current settings
		 */
		public function get settings():Dictionary {
			return _settings;
		}



		private function resetSettings():Dictionary {
			var set:Dictionary = new Dictionary();

			set["hAlign"] = Align.LEFT;
			set["vAlign"] = Align.TOP;
			set["bold"] = false;
			set["blockIndent"] = 0;
			set["bullet"] = false;
			set["color"] = 0x000000;
			set["font"] = null;
			set["indent"] = 0;
			set["italic"] = false;
			set["kerning"] = false;
			set["leading"] = 0;
			set["letterSpacing"] = 0;
			set["size"] = 10;
			set["underline"] = false;
			set["url"] = null;
			set["alpha"] = 1;
			set["filters"] = new Array();
			set["sharpness"] = 0;
			set["thickness"] = 0;
			set["paddingTop"] = 0;
			set["paddingBottom"] = 0;
			set["paddingLeft"] = 0;
			set["paddingRight"] = 0;
			set["marginLeft"] = 0;
			set["marginRight"] = 0;

			return set;
		}
	}
}
